package PRIAM_LANGUAGE.actions;

/*Generated by MPS */

import jetbrains.mps.actions.descriptor.BaseActionAspectDescriptor;
import jetbrains.mps.openapi.actions.descriptor.ActionAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;

public class ActionAspectDescriptorImpl extends BaseActionAspectDescriptor implements ActionAspectDescriptor {
  private static final String LANGUAGE_FQ_NAME = "PRIAM_LANGUAGE";

  @Override
  public Collection<NodeFactory> getFactories(SAbstractConcept concept) {
    if (LANGUAGE_FQ_NAME.equals(concept.getLanguage().getQualifiedName())) {
      switch (concept.getName()) {
        case "Actor":
          return Collections.<NodeFactory>singletonList(new ActorAnnotationFactory.NodeFactory_3562240872144862763());
        case "Address":
          return Collections.<NodeFactory>singletonList(new ActorAnnotationFactory.NodeFactory_1266870654838255558());
        case "Data":
          return Collections.<NodeFactory>singletonList(new DataAnnotationFactory.NodeFactory_1633837476039058291());
        case "DataSubjectCategory":
          return Collections.<NodeFactory>singletonList(new ActorAnnotationFactory.NodeFactory_3562240872139996213());
        case "DataType":
          return Collections.<NodeFactory>singletonList(new DataAnnotationFactory.NodeFactory_5648447043213183316());
        case "DataUsage":
          return Collections.<NodeFactory>singletonList(new ProcessingAnnotation.NodeFactory_643120355008353672());
        case "Measure":
          return Collections.<NodeFactory>singletonList(new ProcessingAnnotation.NodeFactory_643120355009053900());
        case "Processing":
          return Collections.<NodeFactory>singletonList(new ProcessingAnnotation.NodeFactory_643120355008343340());
        case "Purpose":
          return Collections.<NodeFactory>singletonList(new ProcessingAnnotation.NodeFactory_643120355009055850());
        case "SecondaryActorCategory":
          return Collections.<NodeFactory>singletonList(new ActorAnnotationFactory.NodeFactory_3562240872153964676());
        default:
      }
    }
    return Collections.<NodeFactory>emptyList();
  }

}
