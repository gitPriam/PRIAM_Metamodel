package PRIAM_LANGUAGE.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.ArrayList;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class Processing__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411242L, "PRIAM_LANGUAGE.structure.Processing");

  public static final SMethod<Boolean> equals_id5C9N56JKss4 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("equals").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5C9N56JKss4").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Integer> nbMainPurpose_id1DDLnPRj1AY = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("nbMainPurpose").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("1DDLnPRj1AY").build();
  public static final SMethod<Boolean> compareString_id4ugbBHvy5WU = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("compareString").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("4ugbBHvy5WU").build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<List<SNode>> ListDataByProcessing_id3t5Q9dhJ1h0 = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("ListDataByProcessing").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("3t5Q9dhJ1h0").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(equals_id5C9N56JKss4, nbMainPurpose_id1DDLnPRj1AY, compareString_id4ugbBHvy5WU, ListDataByProcessing_id3t5Q9dhJ1h0);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean equals_id5C9N56JKss4(@NotNull SNode __thisNode__, SNode p) {
    if (SPropertyOperations.getString(p, PROPS.name$MnvL) == SPropertyOperations.getString(__thisNode__, PROPS.name$MnvL)) {
      return true;
    }
    return false;
  }
  /*package*/ static int nbMainPurpose_id1DDLnPRj1AY(@NotNull SNode __thisNode__) {
    int cpt = 0;
    for (SNode p : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.purposes$76q7))) {
      if (SPropertyOperations.getEnum(p, PROPS.type$5WjS).toString().equals("Main")) {
        cpt += 1;
      }
    }
    return cpt;
  }
  /*package*/ static boolean compareString_id4ugbBHvy5WU(@NotNull SNode __thisNode__, String ch1, String ch2) {
    return ch1.compareTo(ch2) < 0;
  }
  /*package*/ static List<SNode> ListDataByProcessing_id3t5Q9dhJ1h0(@NotNull SNode __thisNode__) {
    List<SNode> data = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode u : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.dataUsage$IYyr))) {
      ListSequence.fromList(data).addElement(SLinkOperations.getTarget(u, LINKS.data$IQYy));
    }
    return data;
  }

  /*package*/ Processing__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) equals_id5C9N56JKss4(node, (SNode) parameters[0]));
      case 1:
        return (T) ((Integer) nbMainPurpose_id1DDLnPRj1AY(node));
      case 2:
        return (T) ((Boolean) compareString_id4ugbBHvy5WU(node, (String) parameters[0], (String) parameters[1]));
      case 3:
        return (T) ((List<SNode>) ListDataByProcessing_id3t5Q9dhJ1h0(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty type$5WjS = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411d71L, 0x5ed7b73b7b411d74L, "type");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink purposes$76q7 = MetaAdapterFactory.getContainmentLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411242L, 0x5ed7b73b7b4129b5L, "purposes");
    /*package*/ static final SReferenceLink data$IQYy = MetaAdapterFactory.getReferenceLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411277L, 0x3c40a36f21039df9L, "data");
    /*package*/ static final SContainmentLink dataUsage$IYyr = MetaAdapterFactory.getContainmentLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411242L, 0x3c40a36f21039e0aL, "dataUsage");
  }
}
