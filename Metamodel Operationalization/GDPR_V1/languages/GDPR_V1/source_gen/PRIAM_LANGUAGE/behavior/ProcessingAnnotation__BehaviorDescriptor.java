package PRIAM_LANGUAGE.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class ProcessingAnnotation__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x500664cd9d79c21fL, "PRIAM_LANGUAGE.structure.ProcessingAnnotation");

  public static final SMethod<List<SNode>> ProcessingsByDSC_id3t5Q9dhID3w = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("ProcessingsByDSC").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("3t5Q9dhID3w").build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<List<String>> listProcessingName_idzICRpkHbQu = new SMethodBuilder<List<String>>(new SJavaCompoundTypeImpl((Class<List<String>>) ((Class) Object.class))).name("listProcessingName").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("zICRpkHbQu").build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<List<String>> listProcessingTransfer_idzICRpl1aIT = new SMethodBuilder<List<String>>(new SJavaCompoundTypeImpl((Class<List<String>>) ((Class) Object.class))).name("listProcessingTransfer").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("zICRpl1aIT").build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<List<String>> listFurtherProcessing_idzICRplhHpG = new SMethodBuilder<List<String>>(new SJavaCompoundTypeImpl((Class<List<String>>) ((Class) Object.class))).name("listFurtherProcessing").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("zICRplhHpG").build(SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(ProcessingsByDSC_id3t5Q9dhID3w, listProcessingName_idzICRpkHbQu, listProcessingTransfer_idzICRpl1aIT, listFurtherProcessing_idzICRplhHpG);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static List<SNode> ProcessingsByDSC_id3t5Q9dhID3w(@NotNull SNode __thisNode__, String dataSubjectCategoryName) {
    List<SNode> listP = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode p : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.processing$XRQF))) {
      int nbPD = 0;
      for (SNode d : ListSequence.fromList(Processing__BehaviorDescriptor.ListDataByProcessing_id3t5Q9dhJ1h0.invoke(p))) {
        if (SPropertyOperations.getBoolean(d, PROPS.isPersonal$gtJN)) {
          nbPD += 1;
        }
      }
      if (nbPD != 0) {
        ListSequence.fromList(listP).addElement(p);
      }
    }
    return listP;
  }
  /*package*/ static List<String> listProcessingName_idzICRpkHbQu(@NotNull SNode __thisNode__, String dataSubjectCategoryName) {
    List<String> list = ListSequence.fromList(new ArrayList<String>());
    for (SNode p : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.processing$XRQF)).distinct()) {
      int nbPD = 0;
      for (SNode d : ListSequence.fromList(Processing__BehaviorDescriptor.ListDataByProcessing_id3t5Q9dhJ1h0.invoke(p))) {
        if (SPropertyOperations.getBoolean(d, PROPS.isPersonal$gtJN) && SPropertyOperations.getString(SLinkOperations.getTarget(d, LINKS.dataSubjectCategory$gFmH), PROPS.name$MnvL).equals(dataSubjectCategoryName)) {
          nbPD += 1;
        }
      }
      if (nbPD != 0) {
        ListSequence.fromList(list).addElement(SPropertyOperations.getString(p, PROPS.name$MnvL));
      }
    }
    return list;
  }
  /*package*/ static List<String> listProcessingTransfer_idzICRpl1aIT(@NotNull SNode __thisNode__, String dataSubjectCategoryName) {
    List<String> list = ListSequence.fromList(new ArrayList<String>());
    for (SNode p : Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.collect(SLinkOperations.getChildren(__thisNode__, LINKS.processingTransfer$ZZGJ), LINKS.processingRef$EzV5), LINKS.processing$xojj))) {
      int nbPD = 0;
      for (SNode d : ListSequence.fromList(Processing__BehaviorDescriptor.ListDataByProcessing_id3t5Q9dhJ1h0.invoke(p))) {
        if (SPropertyOperations.getBoolean(d, PROPS.isPersonal$gtJN) && SPropertyOperations.getString(SLinkOperations.getTarget(d, LINKS.dataSubjectCategory$gFmH), PROPS.name$MnvL).equals(dataSubjectCategoryName)) {
          nbPD += 1;
        }
      }
      if (nbPD != 0) {
        ListSequence.fromList(list).addElement(SPropertyOperations.getString(p, PROPS.name$MnvL));
      }
    }
    return list;
  }
  /*package*/ static List<String> listFurtherProcessing_idzICRplhHpG(@NotNull SNode __thisNode__, String dataSubjectCategoryName) {
    List<SNode> listProcessing = ProcessingAnnotation__BehaviorDescriptor.ProcessingsByDSC_id3t5Q9dhID3w.invoke(__thisNode__, dataSubjectCategoryName);
    List<String> list = ListSequence.fromList(new ArrayList<String>());
    for (SNode p : ListSequence.fromList(listProcessing)) {
      if (ListSequence.fromList(SLinkOperations.getChildren(p, LINKS.processingLink$pvkZ)).isNotEmpty()) {
        ListSequence.fromList(list).addElement(SPropertyOperations.getString(p, PROPS.name$MnvL));
      }
    }
    return list;
  }

  /*package*/ ProcessingAnnotation__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((List<SNode>) ProcessingsByDSC_id3t5Q9dhID3w(node, (String) parameters[0]));
      case 1:
        return (T) ((List<String>) listProcessingName_idzICRpkHbQu(node, (String) parameters[0]));
      case 2:
        return (T) ((List<String>) listProcessingTransfer_idzICRpl1aIT(node, (String) parameters[0]));
      case 3:
        return (T) ((List<String>) listFurtherProcessing_idzICRplhHpG(node, (String) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty isPersonal$gtJN = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411269L, 0x1f97ffaeb2ce7779L, "isPersonal");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink processing$XRQF = MetaAdapterFactory.getContainmentLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x500664cd9d79c21fL, 0x500664cd9d79c220L, "processing");
    /*package*/ static final SReferenceLink dataSubjectCategory$gFmH = MetaAdapterFactory.getReferenceLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411269L, 0x1f97ffaeb2ce7789L, "dataSubjectCategory");
    /*package*/ static final SContainmentLink processingTransfer$ZZGJ = MetaAdapterFactory.getContainmentLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x500664cd9d79c21fL, 0x8eea37654f47a1cL, "processingTransfer");
    /*package*/ static final SContainmentLink processingRef$EzV5 = MetaAdapterFactory.getContainmentLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x7e195c253bae1d4fL, 0x7e195c253bc1d45aL, "processingRef");
    /*package*/ static final SReferenceLink processing$xojj = MetaAdapterFactory.getReferenceLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x26e217bc0d00c73dL, 0x26e217bc0d022c16L, "processing");
    /*package*/ static final SContainmentLink processingLink$pvkZ = MetaAdapterFactory.getContainmentLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411242L, 0x1f97ffaeb2f18095L, "processingLink");
  }
}
