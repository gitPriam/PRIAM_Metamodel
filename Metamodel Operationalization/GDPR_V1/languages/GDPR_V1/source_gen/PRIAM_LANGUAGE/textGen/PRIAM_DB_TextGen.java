package PRIAM_LANGUAGE.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class PRIAM_DB_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("-- actors creation ---");
    tgs.newLine();

    tgs.append("create database priam_actor");
    tgs.newLine();
    tgs.append("USE priam_actor \n");
    tgs.newLine();

    tgs.append("-- Creation of static table Country --");
    tgs.newLine();

    tgs.append("create Table Country( ");
    tgs.newLine();
    tgs.append("country_id int primary key,");
    tgs.newLine();
    tgs.append("country_name varchar(100),");
    tgs.newLine();
    tgs.append("minor_age int,");
    tgs.newLine();
    tgs.append("adequate boolean);");
    tgs.newLine();

    for (SNode c : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.countries$NGYa), LINKS.countries$5iBS))) {
      tgs.append("insert into Country(country_id, country_name, minor_age, adequate) values (");
      tgs.append(SPropertyOperations.getInteger(c, PROPS.countryId$aJCd) + "");
      tgs.append(", '");
      tgs.append(SPropertyOperations.getString(c, PROPS.name$MnvL));
      tgs.append("' , '");
      tgs.append(SPropertyOperations.getInteger(c, PROPS.minorAge$aKNi) + "");
      tgs.append("' , '");
      tgs.append(SPropertyOperations.getBoolean(c, PROPS.adequate$mDBg) + "");
      tgs.append("');");
      tgs.newLine();
    }

    tgs.newLine();

    tgs.append("-- Creation table Address --");
    tgs.newLine();
    tgs.append("CREATE TABLE Address (");
    tgs.append("address_id INT PRIMARY KEY,");
    tgs.append("street_number VARCHAR(10),");
    tgs.append("street_name VARCHAR(255),");
    tgs.append("postal_code VARCHAR(10),");
    tgs.append("city VARCHAR(255),");
    tgs.append("complement VARCHAR(255));");

    tgs.newLine();

    tgs.append("create table Provider(");
    tgs.newLine();
    tgs.append("provider_id int primary key auto_increment,");
    tgs.newLine();
    tgs.append("provider_name varchar(40) not null,");
    tgs.newLine();
    tgs.append("provider_address int not null,");
    tgs.newLine();
    tgs.append("provider_phone varchar(40),");
    tgs.newLine();
    tgs.append("provider_email varchar(40), ");
    tgs.newLine();
    tgs.append("country_id int, ");
    tgs.newLine();
    tgs.append("foreign key(country_id) references Country(country_id),");
    tgs.newLine();
    tgs.append("foreign key(provider_address) references Address(address_id));");
    tgs.newLine();

    tgs.newLine();

    tgs.append("create table DPO(");
    tgs.newLine();
    tgs.append("dpo_id int primary key auto_increment,");
    tgs.newLine();
    tgs.append("dpo_name varchar(40) not null,");
    tgs.newLine();
    tgs.append("dpo_address int not null,");
    tgs.newLine();
    tgs.append("dpo_phone varchar(40),");
    tgs.newLine();
    tgs.append("dpo_email varchar(40), ");
    tgs.newLine();
    tgs.append("country_id int, ");
    tgs.newLine();
    tgs.append("foreign key(country_id) references Country(country_id),");
    tgs.newLine();
    tgs.append("foreign key(dpo_address) references Address(address_id));");
    tgs.newLine();

    tgs.newLine();

    tgs.append("create table Representative(");
    tgs.newLine();
    tgs.append("representative_id int primary key auto_increment,");
    tgs.newLine();
    tgs.append("representative_name varchar(40) not null,");
    tgs.newLine();
    tgs.append("representative_address int not null,");
    tgs.newLine();
    tgs.append("representative_phone varchar(40),");
    tgs.newLine();
    tgs.append("representative_email varchar(40), ");
    tgs.newLine();
    tgs.append("country_id int, ");
    tgs.newLine();
    tgs.append("foreign key(country_id) references Country(country_id),");
    tgs.newLine();
    tgs.append("foreign key(representative_address) references Address(address_id));");
    tgs.newLine();

    tgs.newLine();


    tgs.append("create table Tutor(");
    tgs.newLine();
    tgs.append("tutor_id int primary key auto_increment,");
    tgs.newLine();
    tgs.append("tutor_name varchar(40) not null,");
    tgs.newLine();
    tgs.append("country_id int, ");
    tgs.newLine();
    tgs.append("foreign key(country_id) references Country(country_id));");
    tgs.newLine();

    tgs.newLine();

    tgs.append("create table SecondaryActorCategory(");
    tgs.newLine();
    tgs.append("secondary_actor_category_id int primary key auto_increment,");
    tgs.newLine();
    tgs.append("secondary_actor_category_name varchar(40));");
    tgs.newLine();

    tgs.newLine();

    tgs.append("create table SecondaryActor(");
    tgs.newLine();
    tgs.append("secondary_actor_id int primary key auto_increment,");
    tgs.newLine();
    tgs.append("secondary_actor_type varchar(40) check(secondary_actor_type in('Recepient', 'DataProcessor', 'ThirdParty')),");
    tgs.newLine();
    tgs.append("secondary_actor_name varchar(40) not null,");
    tgs.newLine();
    tgs.append("secondary_actor_address int not null,");
    tgs.newLine();
    tgs.append("secondary_actor_phone varchar(40),");
    tgs.newLine();
    tgs.append("secondary_actor_email varchar(40), ");
    tgs.newLine();
    tgs.append("safeguard varchar(255), ");
    tgs.newLine();
    //   returns enumeration members in the form: 'e1', 'e2', 'e3'.
    String safeguardType = "";
    for (SEnumerationLiteral st : ListSequence.fromList(SEnumOperations.getMembers(MetaAdapterFactory.getEnumeration(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x2a509229fff451c5L, "PRIAM_LANGUAGE.structure.SafeguardType")))) {
      safeguardType = safeguardType + "'" + st + "',";
    }
    if (safeguardType.length() > 0) {
      safeguardType = safeguardType.substring(0, safeguardType.length() - 1);
    }
    tgs.append("safeguard_type varchar (20) check(safeguard_type in(");
    tgs.append(safeguardType);
    tgs.append(")), ");
    tgs.newLine();
    tgs.append("secondary_actor_category_id int,");
    tgs.newLine();
    tgs.append("country_id int,");
    tgs.newLine();
    tgs.append("foreign key(secondary_actor_category_id) references SecondaryActorCategory(secondary_actor_category_id),");
    tgs.newLine();
    tgs.append("foreign key(country_id) references Country(country_id),");
    tgs.newLine();
    tgs.append("foreign key(secondary_actor_address) references Address(address_id));");
    tgs.newLine();

    tgs.newLine();
    tgs.append("-- DataSubject table gdpr_Creation --");
    tgs.newLine();

    tgs.append("create table DataSubjectCategory (");
    tgs.newLine();
    tgs.append("data_subject_category_id int primary key,");
    tgs.append("data_subject_category_name varchar(25), ");
    tgs.newLine();
    tgs.append("location_id varchar(40));");
    tgs.newLine();

    tgs.newLine();

    tgs.append("create database priam_data_processing");
    tgs.newLine();
    tgs.append("USE priam_data_processing \n");
    tgs.newLine();

    tgs.append("-- Personal Data Category table creation");
    tgs.newLine();

    tgs.append("create table PersonalDataCategory(");
    tgs.newLine();
    tgs.append("personal_data_category_id int primary key,");
    tgs.newLine();
    tgs.append("personal_data_category_name varchar(150));");
    tgs.newLine();


    tgs.newLine();
    tgs.append("-- Data Annotation table Creation --");
    tgs.newLine();

    tgs.newLine();
    tgs.append("-- DataType table creation");
    tgs.newLine();
    tgs.append("create table DataType (");
    tgs.newLine();
    tgs.append("data_type_id int primary key,");
    tgs.newLine();
    tgs.append("data_type_name varchar(40));");
    tgs.newLine();

    tgs.newLine();
    tgs.append("-- Data table creation");
    tgs.newLine();


    tgs.append("create table Data( ");
    tgs.newLine();
    tgs.append("data_id int primary key,");
    tgs.newLine();
    tgs.append("data_name varchar(25), ");
    // returns enumeration members in the form 'e1', 'e2', 'e3'.
    String source = "";
    for (SEnumerationLiteral s : ListSequence.fromList(SEnumOperations.getMembers(MetaAdapterFactory.getEnumeration(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5547fb75b03f47d2L, "PRIAM_LANGUAGE.structure.Source")))) {
      source = source + "'" + s + "',";
    }
    if (source.length() > 0) {
      source = source.substring(0, source.length() - 1);
    }
    tgs.append("source varchar(25) check  (source in(");
    tgs.append(source);
    tgs.append(")), ");
    tgs.newLine();
    tgs.append("source_details varchar(255),");
    tgs.newLine();
    tgs.append("data_conservation_duration int, ");
    tgs.newLine();
    tgs.append("is_personal boolean,");
    tgs.newLine();
    tgs.append("is_portable boolean,");
    tgs.newLine();
    tgs.append("is_primary_key boolean,");
    tgs.newLine();
    tgs.append("data_type_id int,");
    tgs.newLine();
    tgs.append("personal_data_category_id int,");
    tgs.newLine();
    tgs.append("data_subject_category_id int, ");
    tgs.newLine();
    tgs.append("foreign key (data_subject_category_id) references priam_actor.DataSubjectCategory(data_subject_category_id),");
    tgs.newLine();
    tgs.append("foreign key (data_type_id) references DataType(data_type_id),");
    tgs.newLine();
    tgs.append("foreign key(personal_data_category_id) references PersonalDataCategory(personal_data_category_id));");
    tgs.newLine();
    // tables added to simplify dev 
    tgs.newLine();

    tgs.newLine();

    tgs.append("-- Processing Annotation table Creation --");
    tgs.newLine();

    tgs.newLine();

    tgs.append("create table Processing (");
    tgs.newLine();
    tgs.append("processing_id int primary key, ");
    tgs.newLine();
    tgs.append("processing_name varchar(25), ");
    tgs.newLine();
    tgs.append("processing_type varchar(25) check (processing_type in('Default','Mandatory','Optional', 'Necessary')), ");
    tgs.newLine();
    // returns enumeration members in the form 'e1', 'e2', 'e3'.
    String processingCat = "";
    for (SEnumerationLiteral s : ListSequence.fromList(SEnumOperations.getMembers(MetaAdapterFactory.getEnumeration(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x30f0048592d2bde1L, "PRIAM_LANGUAGE.structure.ProcessingCategory")))) {
      processingCat = processingCat + "'" + s + "',";
    }
    if (processingCat.length() > 0) {
      processingCat = processingCat.substring(0, processingCat.length() - 1);
    }

    tgs.append("processing_category varchar(25) check (processing_category in(");
    tgs.append(processingCat);
    tgs.append(")),");
    tgs.newLine();
    tgs.append("created_at date, ");
    tgs.newLine();
    tgs.append("modified_at date);");
    tgs.newLine();
    tgs.append("ended_at date);");
    tgs.newLine();

    String measureType = "";
    for (SEnumerationLiteral s : ListSequence.fromList(SEnumOperations.getMembers(MetaAdapterFactory.getEnumeration(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5e5ebbabb1377bb8L, "PRIAM_LANGUAGE.structure.TypeMeasure")))) {
      measureType = measureType + "'" + s + "',";
    }
    if (measureType.length() > 0) {
      measureType = measureType.substring(0, measureType.length() - 1);
    }

    String measureCat = "";
    for (SEnumerationLiteral s : ListSequence.fromList(SEnumOperations.getMembers(MetaAdapterFactory.getEnumeration(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5e5ebbabb1377bbdL, "PRIAM_LANGUAGE.structure.CategoryMeasure")))) {
      measureCat = measureCat + "'" + s + "',";
    }
    if (measureCat.length() > 0) {
      measureCat = measureCat.substring(0, measureCat.length() - 1);
    }

    tgs.append("create table Measure (");
    tgs.newLine();
    tgs.append("measure_id int primary key , ");
    tgs.newLine();
    tgs.append("measure_description varchar(255), ");
    tgs.newLine();
    tgs.append("measure_type varchar(15) check (measure_type in( ");
    tgs.append(measureType);
    tgs.append(")),");
    tgs.newLine();
    tgs.append("measure_category varchar(20) check (measure_category in( ");
    tgs.append(measureCat);
    tgs.append(")));");
    tgs.newLine();


    tgs.newLine();
    tgs.append("create table Purpose (");
    tgs.newLine();
    tgs.append("purpose_id int primary key auto_increment, ");
    tgs.newLine();
    tgs.append("purpose_description varchar(200) not null,");
    tgs.newLine();
    tgs.append("purpose_type varchar(10) check(purpose_type in('Main', 'Secondary')) ,");
    tgs.newLine();
    tgs.append("processing_id int,");
    tgs.newLine();
    tgs.append("foreign key (processing_id) references Processing(processing_id));");
    tgs.newLine();

    tgs.newLine();
    tgs.newLine();

    String linkType = "";
    for (SEnumerationLiteral s : ListSequence.fromList(SEnumOperations.getMembers(MetaAdapterFactory.getEnumeration(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x1f97ffaeb2db895bL, "PRIAM_LANGUAGE.structure.LinkType")))) {
      linkType = linkType + "'" + s + "',";
    }
    if (linkType.length() > 0) {
      linkType = linkType.substring(0, linkType.length() - 1);
    }
    tgs.append("create table ProcessingLink(");
    tgs.newLine();
    tgs.append("processing1 int, ");
    tgs.newLine();
    tgs.append("processing2 int, ");
    tgs.newLine();
    tgs.append("type_of_link varchar(20),");
    tgs.newLine();
    tgs.append("primary key(processing1, processing2),");
    tgs.newLine();
    tgs.append("foreign key (processing1) references  Processing(processing_id),");
    tgs.newLine();
    tgs.append("foreign key (processing2) references  Processing(processing_id),");
    tgs.newLine();

    tgs.append("constraint const1 check (type_of_link in(");
    tgs.append(linkType);
    tgs.append(")));");
    tgs.newLine();

    tgs.newLine();

    tgs.append("-- DataUsage Annotation --");
    tgs.newLine();



    tgs.append("create table DataUsage(");
    tgs.newLine();
    tgs.append("data_usage_id int primary key auto_increment,");
    tgs.newLine();
    tgs.append("personal_status boolean default 0,");
    tgs.newLine();
    tgs.append("c boolean default 0,");
    tgs.newLine();
    tgs.append("r boolean default 0,");
    tgs.newLine();
    tgs.append("u boolean default 0,");
    tgs.newLine();
    tgs.append("d boolean default 0,");
    tgs.newLine();
    tgs.append("data_id int,");
    tgs.newLine();
    tgs.append("processing_id int,");
    tgs.newLine();
    tgs.append("foreign key(data_id) references priam_data_processing.Data(data_id),");
    tgs.newLine();
    tgs.append("foreign key(processing_id) references Processing(processing_id));");
    tgs.newLine();

    tgs.newLine();
    tgs.append("create table PersonalDataTransfer(");
    tgs.newLine();
    tgs.append("Personal_data_transfer_id int primary key, ");
    tgs.newLine();
    tgs.append("processing_id int,");
    tgs.newLine();
    tgs.append("foreign key(processing_id) references Processing(processing_id));");
    tgs.newLine();

    tgs.newLine();
    tgs.append("create table PersonalDataTransfer_SecondaryActor(");
    tgs.newLine();
    tgs.append("Personal_data_transfer_id int, ");
    tgs.newLine();
    tgs.append("secondary_actor_id int,");
    tgs.newLine();
    tgs.append("primary key (Personal_data_transfer_id, secondary_actor_id),");
    tgs.newLine();
    tgs.append("foreign key(Personal_data_transfer_id) references PersonalDataTransfer(Personal_data_transfer_id),");
    tgs.newLine();
    tgs.append("foreign key(secondary_actor_id) references priam_actor.SecondaryActor(secondary_actor_id));");
    tgs.newLine();

    tgs.newLine();

    tgs.append("create table PersonalDataTransfer_Data(");
    tgs.newLine();
    tgs.append("personal_data_transfer_id int, ");
    tgs.newLine();
    tgs.append("data_id int,");
    tgs.newLine();
    tgs.append("primary key (personal_data_transfer_id, data_id),");
    tgs.newLine();
    tgs.append("foreign key(data_id) references priam_data_processing.Data(data_id));");
    tgs.newLine();


    tgs.newLine();
    tgs.append("create table Processing_Measure(");
    tgs.newLine();
    tgs.append("measure_id int, ");
    tgs.newLine();
    tgs.append("processing_id int,");
    tgs.newLine();
    tgs.append("primary key (measure_id, processing_id),");
    tgs.newLine();
    tgs.append("foreign key(measure_id) references Measure(measure_id),");
    tgs.newLine();
    tgs.append("foreign key(processing_id) references Processing(processing_id));");
    tgs.newLine();

    tgs.newLine();

    tgs.newLine();

    tgs.append("create database priam_right");
    tgs.newLine();
    tgs.append("USE priam_right \n");
    tgs.newLine();

    tgs.append("-- DataSubject Rights Creation--");
    tgs.newLine();

    String dataReqType = "";
    for (SEnumerationLiteral s : ListSequence.fromList(SEnumOperations.getMembers(MetaAdapterFactory.getEnumeration(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x507d8789e719e8c1L, "PRIAM_LANGUAGE.structure.TypeDataRequest")))) {
      dataReqType = dataReqType + "'" + s + "',";
    }
    if (dataReqType.length() > 0) {
      dataReqType = dataReqType.substring(0, dataReqType.length() - 1);
    }

    String processingReqType = "";
    for (SEnumerationLiteral s : ListSequence.fromList(SEnumOperations.getMembers(MetaAdapterFactory.getEnumeration(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x9fd0368595e077aL, "PRIAM_LANGUAGE.structure.ProcessingRequestType")))) {
      processingReqType = processingReqType + "'" + s + "',";
    }
    if (processingReqType.length() > 0) {
      processingReqType = processingReqType.substring(0, processingReqType.length() - 1);
    }


    tgs.append("create table DataRequest ( ");
    tgs.newLine();
    tgs.append("data_request_id int primary key , ");
    tgs.newLine();
    tgs.append("data_request_claim varchar(250), ");
    tgs.newLine();
    tgs.append("data_request_issued_at datetime, ");
    tgs.newLine();
    tgs.append("new_value varchar(250), ");
    tgs.newLine();
    tgs.append("data_request_type varchar(25) check (data_request_type in(");
    tgs.append(dataReqType);
    tgs.append(")),");
    tgs.newLine();
    tgs.append("data_subject_id int,");
    tgs.newLine();
    tgs.append("foreign key(data_subject_id) references priam_actor.DataSubject(data_subject_id)),");
    tgs.newLine();
    // attribute added to simplify dev
    tgs.append("response boolean);");
    tgs.newLine();

    tgs.newLine();
    tgs.append("create table DataRequest_Data (");
    tgs.newLine();
    tgs.append("data_request_id int, ");
    tgs.newLine();
    tgs.append("data_id int,");
    tgs.newLine();
    tgs.append("primary key (data_request_id, data_id),");
    tgs.newLine();
    tgs.append("answer_by_data boolean,");
    tgs.newLine();
    tgs.append("foreign key(data_request_id) references DataRequest(data_request_id),");
    tgs.newLine();
    tgs.append("foreign key(data_id) references priam_data_processing.Data(data_id));");
    tgs.newLine();

    // tables added to simplify dev 
    tgs.newLine();
    tgs.append("create table DataRequest_PrimaryKey (");
    tgs.newLine();
    tgs.append("data_request_id int, ");
    tgs.newLine();
    tgs.append("primary_key_id int,");
    tgs.newLine();
    tgs.append("primary_key_value varchar(50), ");
    tgs.newLine();
    tgs.append("primary key (data_request_id, primary_key_id),");
    tgs.newLine();
    tgs.append("foreign key(data_request_id) references DataRequest(data_request_id),");
    tgs.newLine();
    tgs.append("foreign key(primary_key_id) references priam-data-processing.Data(data_id));");
    tgs.newLine();

    tgs.newLine();

    tgs.append("create table DataRequestAnswer(");
    tgs.newLine();
    tgs.append("data_request_answer_id int primary key ,");
    tgs.newLine();
    tgs.append("answer varchar(7) check (answer in('Full', 'Partial', 'Refused')) ,");
    tgs.newLine();
    tgs.append("data_request_claim varchar(250),");
    tgs.newLine();
    tgs.append("data_request_id int,");
    tgs.newLine();
    tgs.append("foreign key (data_request_id) references Data_request(data_request_id));");
    tgs.newLine();

    tgs.newLine();
    tgs.append("create table ProcessingRequest(");
    tgs.newLine();
    tgs.append("processing_request_id int primary key, ");
    tgs.newLine();
    tgs.append("processing_request_claim varchar(250), ");
    tgs.newLine();
    tgs.append("processing_request_issued_at datetime, ");
    tgs.newLine();
    tgs.append("processing_request_type varchar(25) check (processing_request_type in(");
    tgs.append(processingReqType);
    tgs.append(")),");
    tgs.newLine();
    tgs.append("data_subject_id int, ");
    tgs.newLine();
    tgs.append("processing_id int, ");
    tgs.newLine();
    tgs.append("foreign key (data_subject_id) references priam_actor.DataSubject(data_subject_id),");
    tgs.newLine();
    tgs.append("foreign key (processing_id) references priam_data-processing.Processing(processing_id)),");
    tgs.newLine();
    // attribute added to simplify dev
    tgs.append("response boolean);");
    tgs.newLine();

    tgs.newLine();

    tgs.append("create table ProcessingRequestAnswer(");
    tgs.newLine();
    tgs.append("processing_request_answer_id int primary key ,");
    tgs.newLine();
    tgs.append("answer varchar(7) check (answer in('Full', 'Partial', 'Refused')),");
    tgs.newLine();
    tgs.append("processing_request_answer_claim varchar(250),");
    tgs.newLine();
    tgs.append("processing_request_id int,");
    tgs.newLine();
    tgs.append("foreign key (processing_request_id) references ProcessingRequest(processing_request_id));");
    tgs.newLine();


    tgs.newLine();


    tgs.append("-- Contract and consent management --");
    tgs.newLine();

    tgs.append("create database priam_consent");
    tgs.newLine();
    tgs.append("USE priam_consent \n");
    tgs.newLine();

    tgs.append("create table Contract(");
    tgs.newLine();
    tgs.append("contract_id int primary key auto_increment,");
    tgs.newLine();
    tgs.append("signature_date date, ");
    tgs.newLine();
    tgs.append("expiration_date date, ");
    tgs.newLine();
    tgs.append("data_subject_id int, ");
    tgs.newLine();
    tgs.append("foreign key (data_subject_id) references priam-actor.Data_subject(data_subject_id));");
    tgs.newLine();

    tgs.newLine();

    tgs.append("create table Consent (");
    tgs.newLine();
    tgs.append("consent_id int primary key auto_increment,  ");
    tgs.newLine();
    tgs.append("start_date date, ");
    tgs.newLine();
    tgs.append("end_date date, ");
    tgs.newLine();
    tgs.append("processing_id int, ");
    tgs.newLine();
    tgs.append("contract_id int, ");
    tgs.newLine();
    tgs.append("foreign key (processing_id) references priam_data_processing.Processing(processing_id), ");
    tgs.newLine();
    tgs.append("foreign key (contract_id) references Contract(contract_id)); ");
    tgs.newLine();

    // Breach part
    tgs.newLine();

    tgs.append("create database priam_breach");
    tgs.newLine();
    tgs.append("USE priam_breach \n");
    tgs.newLine();

    tgs.append("create table Breach (");
    tgs.newLine();
    tgs.append("breach_id int primary key , ");
    tgs.newLine();
    tgs.append("nature varchar(40), ");
    tgs.newLine();
    tgs.append("risk_level varchar(7) check (risk_level in('NoRisk','Average','High')), ");
    tgs.newLine();
    tgs.append("creation_date date, ");
    tgs.newLine();
    tgs.append("sprv_auth_non_notif_reason varchar(255), ");
    tgs.newLine();
    tgs.append("ds_non_notif_reason varchar(255)); ");
    tgs.newLine();

    tgs.newLine();
    tgs.append("-- Consequence table gdpr_Creation --");
    tgs.newLine();

    tgs.append("create table Consequence (");
    tgs.newLine();
    tgs.append("consequence_id int primary key , ");
    tgs.newLine();
    tgs.append("consequence_description varchar(255));");
    tgs.newLine();

    // many to many tables
    tgs.newLine();
    tgs.append("create table Breach_Measure(");
    tgs.newLine();
    tgs.append("measure_id int, ");
    tgs.newLine();
    tgs.append("breach_id int,");
    tgs.newLine();
    tgs.append("primary key (measure_id, breach_id),");
    tgs.newLine();
    tgs.append("foreign key(measure_id) references priam_data_processing.Measure(measure_id),");
    tgs.newLine();
    tgs.append("foreign key(breach_id) references Breach(breach_id));");
    tgs.newLine();
    tgs.newLine();
    tgs.append("create table Breach_Consequence(");
    tgs.newLine();
    tgs.append("consequence_id int, ");
    tgs.newLine();
    tgs.append("breach_id int,");
    tgs.newLine();
    tgs.append("primary key (consequence_id, breach_id),");
    tgs.newLine();
    tgs.append("foreign key(consequence_id) references Consequence(consequence_id),");
    tgs.newLine();
    tgs.append("foreign key(breach_id) references Breach(breach_id));");
    tgs.newLine();

    tgs.newLine();
    tgs.append("create table Breach_DataSubject(");
    tgs.newLine();
    tgs.append("data_subject_id int, ");
    tgs.newLine();
    tgs.append("breach_id int,");
    tgs.newLine();
    tgs.append("primary key (data_subject_id, breach_id),");
    tgs.newLine();
    tgs.append("foreign key(data_subject_id) references priam-actor.DataSubject(data_subject_id),");
    tgs.newLine();
    tgs.append("foreign key(breach_id) references Breach(breach_id));");
    tgs.newLine();

    tgs.newLine();
    tgs.append("create table Breach_Data(");
    tgs.newLine();
    tgs.append("data_id int, ");
    tgs.newLine();
    tgs.append("breach_id int,");
    tgs.newLine();
    tgs.append("nb_records int,");
    tgs.newLine();
    tgs.append("primary key (data_id, breach_id),");
    tgs.newLine();
    tgs.append("foreign key(data_id) references priam_data_processing.Data(data_id),");
    tgs.newLine();
    tgs.append("foreign key(breach_id) references Breach(breach_id));");
    tgs.newLine();


  }

  private static final class PROPS {
    /*package*/ static final SProperty countryId$aJCd = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5e5ebbabb1377b5dL, 0x5e5ebbabb1377b60L, "countryId");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty minorAge$aKNi = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5e5ebbabb1377b5dL, 0x5e5ebbabb1377b65L, "minorAge");
    /*package*/ static final SProperty adequate$mDBg = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5e5ebbabb1377b5dL, 0x1f97ffaeb2ca28e2L, "adequate");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink countries$NGYa = MetaAdapterFactory.getReferenceLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x824129b34920bc3L, 0x316f9f331d308df6L, "countries");
    /*package*/ static final SContainmentLink countries$5iBS = MetaAdapterFactory.getContainmentLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x4e6350a8b6cd4c08L, 0x4e6350a8b6cd4c0bL, "countries");
  }
}
