package PRIAM_LANGUAGE.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import PRIAM_LANGUAGE.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.ActorAnnotation:
        return new ActorAnnotation_TextGen();
      case LanguageConceptSwitch.Contract:
        return new Contract_TextGen();
      case LanguageConceptSwitch.DataAnnotation:
        return new DataAnnotation_TextGen();
      case LanguageConceptSwitch.DataRequest:
        return new DataRequest_TextGen();
      case LanguageConceptSwitch.DataRequestAnswer:
        return new DataRequestAnswer_TextGen();
      case LanguageConceptSwitch.PRIAM_DB:
        return new PRIAM_DB_TextGen();
      case LanguageConceptSwitch.ProcessingAnnotation:
        return new ProcessingAnnotation_TextGen();
      case LanguageConceptSwitch.Requirements:
        return new Requirements_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.ProcessingAnnotation$bY)) {
        String fname = getFileName_ProcessingAnnotation(root);
        String ext = getFileExtension_ProcessingAnnotation(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.Contract$He)) {
        String fname = getFileName_Contract(root);
        String ext = getFileExtension_Contract(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.DataAnnotation$yY)) {
        String fname = getFileName_DataAnnotation(root);
        String ext = getFileExtension_DataAnnotation(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.DataRequestAnswer$Qf)) {
        String fname = getFileName_DataRequestAnswer(root);
        String ext = getFileExtension_DataRequestAnswer(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.DataRequest$Mr)) {
        String fname = getFileName_DataRequest(root);
        String ext = getFileExtension_DataRequest(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.PRIAM_DB$x0)) {
        String fname = getFileName_PRIAM_DB(root);
        String ext = getFileExtension_PRIAM_DB(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.Requirements$OX)) {
        String fname = getFileName_Requirements(root);
        String ext = getFileExtension_Requirements(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(CONCEPTS.ActorAnnotation$z7)) {
        String fname = getFileName_ActorAnnotation(root);
        String ext = getFileExtension_ActorAnnotation(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_ProcessingAnnotation(SNode node) {
    return "Processing_annotation";
  }
  private static String getFileName_Contract(SNode node) {
    return "contract" + SLinkOperations.getTarget(node, LINKS.dataSubjectRef$7fRA);
  }
  private static String getFileName_DataAnnotation(SNode node) {
    return "Data Annotation";
  }
  private static String getFileName_DataRequestAnswer(SNode node) {
    return "answer" + SPropertyOperations.getInteger(node, PROPS.id$H83Q);
  }
  private static String getFileName_DataRequest(SNode node) {
    return SLinkOperations.getTarget(node, LINKS.datasubject$x_4x) + SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.dataReq$8raH), PROPS.name$MnvL) + SPropertyOperations.getEnum(node, PROPS.type$xOM$).toString();
  }
  private static String getFileName_PRIAM_DB(SNode node) {
    return "PRIAM_GDPR";
  }
  private static String getFileName_Requirements(SNode node) {
    return "Backlog_User stories";
  }
  private static String getFileName_ActorAnnotation(SNode node) {
    return "Actor_annotation";
  }
  private static String getFileExtension_ProcessingAnnotation(SNode node) {
    return "sql";
  }
  private static String getFileExtension_Contract(SNode node) {
    return "sql";
  }
  private static String getFileExtension_DataAnnotation(SNode node) {
    return "sql";
  }
  private static String getFileExtension_DataRequestAnswer(SNode node) {
    return "sql";
  }
  private static String getFileExtension_DataRequest(SNode node) {
    return "sql";
  }
  private static String getFileExtension_PRIAM_DB(SNode node) {
    return "sql";
  }
  private static String getFileExtension_Requirements(SNode node) {
    return "txt";
  }
  private static String getFileExtension_ActorAnnotation(SNode node) {
    return "sql";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ProcessingAnnotation$bY = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x500664cd9d79c21fL, "PRIAM_LANGUAGE.structure.ProcessingAnnotation");
    /*package*/ static final SConcept Contract$He = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b4089d2L, "PRIAM_LANGUAGE.structure.Contract");
    /*package*/ static final SConcept DataAnnotation$yY = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x3af6325cd45a5aa2L, "PRIAM_LANGUAGE.structure.DataAnnotation");
    /*package*/ static final SConcept DataRequestAnswer$Qf = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x3f0ad7c4153e7cfeL, "PRIAM_LANGUAGE.structure.DataRequestAnswer");
    /*package*/ static final SConcept DataRequest$Mr = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x40844459bb3c96e9L, "PRIAM_LANGUAGE.structure.DataRequest");
    /*package*/ static final SConcept PRIAM_DB$x0 = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x824129b34920bc3L, "PRIAM_LANGUAGE.structure.PRIAM_DB");
    /*package*/ static final SConcept Requirements$OX = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x2661cc24bc0aafbfL, "PRIAM_LANGUAGE.structure.Requirements");
    /*package*/ static final SConcept ActorAnnotation$z7 = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x2a509229fff4521eL, "PRIAM_LANGUAGE.structure.ActorAnnotation");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink dataSubjectRef$7fRA = MetaAdapterFactory.getContainmentLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b4089d2L, 0x1f97ffaeb30c0a84L, "dataSubjectRef");
    /*package*/ static final SReferenceLink datasubject$x_4x = MetaAdapterFactory.getReferenceLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x40844459bb3c96e9L, 0x507d8789e719e8a4L, "datasubject");
    /*package*/ static final SReferenceLink dataReq$8raH = MetaAdapterFactory.getReferenceLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x40844459bb3c96e9L, 0x40844459bb3d1981L, "dataReq");
  }

  private static final class PROPS {
    /*package*/ static final SProperty id$H83Q = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x3f0ad7c4153e7cfeL, 0x3f0ad7c4153e7cffL, "id");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty type$xOM$ = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x40844459bb3c96e9L, 0x507d8789e719e8bdL, "type");
  }
}
