package PRIAM_LANGUAGE.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class DataRequest_Constraints extends BaseConstraintsDescriptor {
  public DataRequest_Constraints() {
    super(CONCEPTS.DataRequest$Mr);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    if ((SPropertyOperations.getEnum(node, PROPS.type$xOM$).toString().equals("Rectification") || SPropertyOperations.getEnum(node, PROPS.type$xOM$).toString().equals("Forgotten")) && ListSequence.fromList(SConceptOperations.getAllSuperConcepts(childConcept, false)).count() > 2) {
      return false;
    } else {
      return true;
    }
  }
  private static final SNodePointer canBeChildBreakingPoint = new SNodePointer("r:1dfc30dd-a369-40c9-b654-fedeab4cc8c4(PRIAM_LANGUAGE.constraints)", "5927725931185966537");

  private static final class CONCEPTS {
    /*package*/ static final SConcept DataRequest$Mr = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x40844459bb3c96e9L, "PRIAM_LANGUAGE.structure.DataRequest");
  }

  private static final class PROPS {
    /*package*/ static final SProperty type$xOM$ = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x40844459bb3c96e9L, 0x507d8789e719e8bdL, "type");
  }
}
