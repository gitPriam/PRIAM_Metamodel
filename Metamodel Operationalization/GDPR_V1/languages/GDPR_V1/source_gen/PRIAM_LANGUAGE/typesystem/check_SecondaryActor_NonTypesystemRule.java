package PRIAM_LANGUAGE.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_SecondaryActor_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_SecondaryActor_NonTypesystemRule() {
  }
  public void applyRule(final SNode secondaryActor, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (!(SPropertyOperations.getBoolean(SLinkOperations.getTarget(secondaryActor, LINKS.country$PakR), PROPS.adequate$mDBg)) && SPropertyOperations.getEnum(secondaryActor, PROPS.safeguardType$iVKA).toString() == "No") {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(secondaryActor, "The country of the secondary actor for which you are going to transfer personal data does not offer an adequate level of protection, please ensure that you introduce the safeguard.", "r:2adcd0b5-6265-4462-b7b6-92dedd477e2c(PRIAM_LANGUAGE.typesystem)", "5156672680738407294", null, errorTarget);
      }
    }


  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.SecondaryActor$NQ;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty safeguardType$iVKA = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x30f0048592d2bdaaL, 0x2a509229fff451bdL, "safeguardType");
    /*package*/ static final SProperty adequate$mDBg = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5e5ebbabb1377b5dL, 0x1f97ffaeb2ca28e2L, "adequate");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink country$PakR = MetaAdapterFactory.getReferenceLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x30f0048592d2bda8L, 0x5e5ebbabb1377b6dL, "country");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SecondaryActor$NQ = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x30f0048592d2bdaaL, "PRIAM_LANGUAGE.structure.SecondaryActor");
  }
}
