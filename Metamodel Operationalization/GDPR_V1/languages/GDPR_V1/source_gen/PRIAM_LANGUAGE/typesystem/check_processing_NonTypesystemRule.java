package PRIAM_LANGUAGE.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import PRIAM_LANGUAGE.behavior.Processing__BehaviorDescriptor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_processing_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_processing_NonTypesystemRule() {
  }
  public void applyRule(final SNode processing, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if ((int) Processing__BehaviorDescriptor.nbMainPurpose_id1DDLnPRj1AY.invoke(processing) > 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(processing, "One main purpose can be added", "r:2adcd0b5-6265-4462-b7b6-92dedd477e2c(PRIAM_LANGUAGE.typesystem)", "1903269460203845168", null, errorTarget);
      }
    }

    if ((int) Processing__BehaviorDescriptor.nbMainPurpose_id1DDLnPRj1AY.invoke(processing) < 1) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(processing, "It must have at least one main purpose", "r:2adcd0b5-6265-4462-b7b6-92dedd477e2c(PRIAM_LANGUAGE.typesystem)", "6829385373503092829", null, errorTarget);
      }
    }

    if (SPropertyOperations.getEnum(processing, PROPS.pt$RPDf).toString().equals("Optional") || SPropertyOperations.getEnum(processing, PROPS.pt$RPDf).toString().equals("Necessary")) {
      if (!(SPropertyOperations.getEnum(processing, PROPS.pc$RQ7h).toString().equals("Consent_Contract"))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(processing, "All 'optional'and 'Necessary' processing must be in the 'consent' category", "r:2adcd0b5-6265-4462-b7b6-92dedd477e2c(PRIAM_LANGUAGE.typesystem)", "1903269460204623145", null, errorTarget);
        }
      }
    }

    if (SPropertyOperations.getEnum(processing, PROPS.pc$RQ7h).toString().equals("LegalObligation") || SPropertyOperations.getEnum(processing, PROPS.pc$RQ7h).toString().equals("VitalInterests") || SPropertyOperations.getEnum(processing, PROPS.pc$RQ7h).toString().equals("publicInterest")) {
      if (!(SPropertyOperations.getEnum(processing, PROPS.pt$RPDf).toString().equals("Mandatory"))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(processing, "Any processing that falls into the category of 'legal obligation' or 'vital interest' is 'Mandatory'", "r:2adcd0b5-6265-4462-b7b6-92dedd477e2c(PRIAM_LANGUAGE.typesystem)", "5927725931185614731", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Processing$5F;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty pc$RQ7h = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411242L, 0x5ed7b73b7b411249L, "pc");
    /*package*/ static final SProperty pt$RPDf = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411242L, 0x5ed7b73b7b411247L, "pt");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Processing$5F = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411242L, "PRIAM_LANGUAGE.structure.Processing");
  }
}
