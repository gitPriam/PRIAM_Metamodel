package PRIAM_LANGUAGE.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_DataUsage_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_DataUsage_NonTypesystemRule() {
  }
  public void applyRule(final SNode dataUsage, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (!(SPropertyOperations.getBoolean(SLinkOperations.getTarget(dataUsage, LINKS.data$IQYy), PROPS.isPersonal$gtJN))) {
      if (SPropertyOperations.getBoolean(dataUsage, PROPS.hasPersonalUsage$NmBj)) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(dataUsage, "Non-personal data cannot have personal status", "r:2adcd0b5-6265-4462-b7b6-92dedd477e2c(PRIAM_LANGUAGE.typesystem)", "4978688509084334792", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.DataUsage$nH;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink data$IQYy = MetaAdapterFactory.getReferenceLink(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411277L, 0x3c40a36f21039df9L, "data");
  }

  private static final class PROPS {
    /*package*/ static final SProperty isPersonal$gtJN = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411269L, 0x1f97ffaeb2ce7779L, "isPersonal");
    /*package*/ static final SProperty hasPersonalUsage$NmBj = MetaAdapterFactory.getProperty(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411277L, 0x5ed7b73b7b4117c9L, "hasPersonalUsage");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DataUsage$nH = MetaAdapterFactory.getConcept(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411277L, "PRIAM_LANGUAGE.structure.DataUsage");
  }
}
