package PRIAM_LANGUAGE.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.openapi.editor.cells.KeyMap;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ActorAnnotation_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Address_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Consent_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Contract_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Country_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new DPO_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new Data_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new DataAnnotation_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new DataRequest_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new DataRequestAnswer_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new DataSubject_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new DataSubjectCategory_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new DataType_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new DataUsage_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new ListCountry_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new ListPersonalDataCategory_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Measure_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new MeasureRef_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new PRIAM_DB_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new PersonalDataCategory_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new PersonalDataTransfer_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new Processing_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new ProcessingAnnotation_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new ProcessingLink_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new ProcessingRef_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new Provider_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new Purpose_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new Representative_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new Requirements_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new SecondaryActor_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new SecondaryActorCategory_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new DataSubjectRef_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new MainActorRef_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new MeasureRef_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new SecondaryActorRef_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<KeyMap> getDeclaredKeyMaps() {
    return Arrays.<KeyMap>asList(new Checkbox_KeyMap_fii06i_d0(), new Checkbox_KeyMap_fii06i_g0(), new Checkbox_KeyMap_fii06i_i0(), new Checkbox_KeyMap_fii06i_k0(), new Checkbox_KeyMap_fii06i_m0(), new Checkbox_KeyMap_rat5n5_e0(), new Checkbox_KeyMap_rat5n5_g0(), new Checkbox_KeyMap_rat5n5_a41a());
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x2a509229fff4521eL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x2a509229fff451b6L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411215L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b4089d2L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5e5ebbabb1377b5dL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5e5ebbabb1377b6fL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411269L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x3af6325cd45a5aa2L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x40844459bb3c96e9L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x3f0ad7c4153e7cfeL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x30f0048592d2bdabL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x507d8789e725b2fdL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5309b4b3bd5290L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411277L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x4e6350a8b6cd4c08L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x6224fff6288f34a8L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5e5ebbabb1377b9fL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x60f68a1f3f26e7c5L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x824129b34920bc3L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x6224fff6288f34a4L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x7e195c253bae1d4fL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411242L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x500664cd9d79c21fL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x1f97ffaeb2db8958L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x26e217bc0d00c73dL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x30f0048592d2bdacL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5ed7b73b7b411d71L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x2a509229fff45205L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x2661cc24bc0aafbfL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x30f0048592d2bdaaL), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x5e5ebbabb1377b7cL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x1f97ffaeb30c0a81L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x1f97ffaeb3031cc1L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x60f68a1f3f26e7c5L), MetaIdFactory.conceptId(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x7e195c253bbd8ccaL)).seal();
}
