package PRIAM_LANGUAGE.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Actor;
  private ConceptPresentation props_ActorAnnotation;
  private ConceptPresentation props_Address;
  private ConceptPresentation props_Breach;
  private ConceptPresentation props_Consent;
  private ConceptPresentation props_Consequence;
  private ConceptPresentation props_Contract;
  private ConceptPresentation props_Country;
  private ConceptPresentation props_DPO;
  private ConceptPresentation props_Data;
  private ConceptPresentation props_DataAnnotation;
  private ConceptPresentation props_DataAnswer;
  private ConceptPresentation props_DataRef;
  private ConceptPresentation props_DataRequest;
  private ConceptPresentation props_DataRequestAnswer;
  private ConceptPresentation props_DataSubject;
  private ConceptPresentation props_DataSubjectCategory;
  private ConceptPresentation props_DataSubjectRef;
  private ConceptPresentation props_DataType;
  private ConceptPresentation props_DataUsage;
  private ConceptPresentation props_ListCountry;
  private ConceptPresentation props_ListPersonalDataCategory;
  private ConceptPresentation props_MainActor;
  private ConceptPresentation props_MainActorRef;
  private ConceptPresentation props_Measure;
  private ConceptPresentation props_MeasureRef;
  private ConceptPresentation props_NonPersonalData;
  private ConceptPresentation props_PRIAM_DB;
  private ConceptPresentation props_PersonalData;
  private ConceptPresentation props_PersonalDataCategory;
  private ConceptPresentation props_PersonalDataTransfer;
  private ConceptPresentation props_Processing;
  private ConceptPresentation props_ProcessingAnnotation;
  private ConceptPresentation props_ProcessingLink;
  private ConceptPresentation props_ProcessingRef;
  private ConceptPresentation props_ProcessingRequest;
  private ConceptPresentation props_Provider;
  private ConceptPresentation props_Purpose;
  private ConceptPresentation props_Representative;
  private ConceptPresentation props_Request;
  private ConceptPresentation props_Requirements;
  private ConceptPresentation props_SecondaryActor;
  private ConceptPresentation props_SecondaryActorCategory;
  private ConceptPresentation props_SecondaryActorRef;
  private ConceptPresentation props_Tutor;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Actor:
        if (props_Actor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Actor = cpb.create();
        }
        return props_Actor;
      case LanguageConceptSwitch.ActorAnnotation:
        if (props_ActorAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Define the actors, provider, DPO, Representative and secondary actors (data consumers)");
          cpb.rawPresentation("actorAnnotation");
          props_ActorAnnotation = cpb.create();
        }
        return props_ActorAnnotation;
      case LanguageConceptSwitch.Address:
        if (props_Address == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Address");
          props_Address = cpb.create();
        }
        return props_Address;
      case LanguageConceptSwitch.Breach:
        if (props_Breach == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Breach");
          props_Breach = cpb.create();
        }
        return props_Breach;
      case LanguageConceptSwitch.Consent:
        if (props_Consent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("consent");
          props_Consent = cpb.create();
        }
        return props_Consent;
      case LanguageConceptSwitch.Consequence:
        if (props_Consequence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Consequence");
          props_Consequence = cpb.create();
        }
        return props_Consequence;
      case LanguageConceptSwitch.Contract:
        if (props_Contract == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("contract");
          props_Contract = cpb.create();
        }
        return props_Contract;
      case LanguageConceptSwitch.Country:
        if (props_Country == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Country = cpb.create();
        }
        return props_Country;
      case LanguageConceptSwitch.DPO:
        if (props_DPO == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DPO = cpb.create();
        }
        return props_DPO;
      case LanguageConceptSwitch.Data:
        if (props_Data == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Data = cpb.create();
        }
        return props_Data;
      case LanguageConceptSwitch.DataAnnotation:
        if (props_DataAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dataAnnotation");
          props_DataAnnotation = cpb.create();
        }
        return props_DataAnnotation;
      case LanguageConceptSwitch.DataAnswer:
        if (props_DataAnswer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DataAnswer");
          props_DataAnswer = cpb.create();
        }
        return props_DataAnswer;
      case LanguageConceptSwitch.DataRef:
        if (props_DataRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("data");
          props_DataRef = cpb.create();
        }
        return props_DataRef;
      case LanguageConceptSwitch.DataRequest:
        if (props_DataRequest == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dataRequest");
          props_DataRequest = cpb.create();
        }
        return props_DataRequest;
      case LanguageConceptSwitch.DataRequestAnswer:
        if (props_DataRequestAnswer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("answer");
          props_DataRequestAnswer = cpb.create();
        }
        return props_DataRequestAnswer;
      case LanguageConceptSwitch.DataSubject:
        if (props_DataSubject == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DataSubject = cpb.create();
        }
        return props_DataSubject;
      case LanguageConceptSwitch.DataSubjectCategory:
        if (props_DataSubjectCategory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DataSubjectCategory = cpb.create();
        }
        return props_DataSubjectCategory;
      case LanguageConceptSwitch.DataSubjectRef:
        if (props_DataSubjectRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x1f97ffaeb30c0a81L, 0x1f97ffaeb30c0a82L, "dataSubject", "", "");
          props_DataSubjectRef = cpb.create();
        }
        return props_DataSubjectRef;
      case LanguageConceptSwitch.DataType:
        if (props_DataType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DataType = cpb.create();
        }
        return props_DataType;
      case LanguageConceptSwitch.DataUsage:
        if (props_DataUsage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dataUsage");
          props_DataUsage = cpb.create();
        }
        return props_DataUsage;
      case LanguageConceptSwitch.ListCountry:
        if (props_ListCountry == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("List of countries");
          props_ListCountry = cpb.create();
        }
        return props_ListCountry;
      case LanguageConceptSwitch.ListPersonalDataCategory:
        if (props_ListPersonalDataCategory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ListPersonalDataCategory");
          props_ListPersonalDataCategory = cpb.create();
        }
        return props_ListPersonalDataCategory;
      case LanguageConceptSwitch.MainActor:
        if (props_MainActor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MainActor = cpb.create();
        }
        return props_MainActor;
      case LanguageConceptSwitch.MainActorRef:
        if (props_MainActorRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x1f97ffaeb3031cc1L, 0x1f97ffaeb3031cc2L, "actor", "", "");
          props_MainActorRef = cpb.create();
        }
        return props_MainActorRef;
      case LanguageConceptSwitch.Measure:
        if (props_Measure == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Measure");
          props_Measure = cpb.create();
        }
        return props_Measure;
      case LanguageConceptSwitch.MeasureRef:
        if (props_MeasureRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x60f68a1f3f26e7c5L, 0x60f68a1f3f26e7c6L, "measureRef", "", "");
          props_MeasureRef = cpb.create();
        }
        return props_MeasureRef;
      case LanguageConceptSwitch.NonPersonalData:
        if (props_NonPersonalData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_NonPersonalData = cpb.create();
        }
        return props_NonPersonalData;
      case LanguageConceptSwitch.PRIAM_DB:
        if (props_PRIAM_DB == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PRIAM_GDPR");
          props_PRIAM_DB = cpb.create();
        }
        return props_PRIAM_DB;
      case LanguageConceptSwitch.PersonalData:
        if (props_PersonalData == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PersonalData = cpb.create();
        }
        return props_PersonalData;
      case LanguageConceptSwitch.PersonalDataCategory:
        if (props_PersonalDataCategory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PersonalDataCategory = cpb.create();
        }
        return props_PersonalDataCategory;
      case LanguageConceptSwitch.PersonalDataTransfer:
        if (props_PersonalDataTransfer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PersonalDataTransfer");
          props_PersonalDataTransfer = cpb.create();
        }
        return props_PersonalDataTransfer;
      case LanguageConceptSwitch.Processing:
        if (props_Processing == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Processing = cpb.create();
        }
        return props_Processing;
      case LanguageConceptSwitch.ProcessingAnnotation:
        if (props_ProcessingAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("processingAnnotation");
          props_ProcessingAnnotation = cpb.create();
        }
        return props_ProcessingAnnotation;
      case LanguageConceptSwitch.ProcessingLink:
        if (props_ProcessingLink == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ProcessingLink");
          props_ProcessingLink = cpb.create();
        }
        return props_ProcessingLink;
      case LanguageConceptSwitch.ProcessingRef:
        if (props_ProcessingRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("processing");
          props_ProcessingRef = cpb.create();
        }
        return props_ProcessingRef;
      case LanguageConceptSwitch.ProcessingRequest:
        if (props_ProcessingRequest == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("processing");
          props_ProcessingRequest = cpb.create();
        }
        return props_ProcessingRequest;
      case LanguageConceptSwitch.Provider:
        if (props_Provider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Provider = cpb.create();
        }
        return props_Provider;
      case LanguageConceptSwitch.Purpose:
        if (props_Purpose == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("purpose");
          props_Purpose = cpb.create();
        }
        return props_Purpose;
      case LanguageConceptSwitch.Representative:
        if (props_Representative == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Representative = cpb.create();
        }
        return props_Representative;
      case LanguageConceptSwitch.Request:
        if (props_Request == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Request = cpb.create();
        }
        return props_Request;
      case LanguageConceptSwitch.Requirements:
        if (props_Requirements == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Requirements");
          props_Requirements = cpb.create();
        }
        return props_Requirements;
      case LanguageConceptSwitch.SecondaryActor:
        if (props_SecondaryActor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SecondaryActor = cpb.create();
        }
        return props_SecondaryActor;
      case LanguageConceptSwitch.SecondaryActorCategory:
        if (props_SecondaryActorCategory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SecondaryActorCategory = cpb.create();
        }
        return props_SecondaryActorCategory;
      case LanguageConceptSwitch.SecondaryActorRef:
        if (props_SecondaryActorRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xe02dfeab630f4f6dL, 0x86a8a0833a3f70fcL, 0x7e195c253bbd8ccaL, 0x7e195c253bbd8ccbL, "secondaryActorRef", "", "");
          props_SecondaryActorRef = cpb.create();
        }
        return props_SecondaryActorRef;
      case LanguageConceptSwitch.Tutor:
        if (props_Tutor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Tutor = cpb.create();
        }
        return props_Tutor;
    }
    return null;
  }
}
